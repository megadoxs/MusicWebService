@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()
AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\nEight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white", $legendText="storage\nRounded box")

SHOW_PERSON_OUTLINE()

title Level 2 â€“ System Context Diagram for Music Listening Platform

Person(user, "User", "A user of the music listening platform.")
Person(artist, "Artist", "A music artist who uploads songs and albums.")

System_Boundary(c1, "Music Listening Platform") {
    Container(spaApp, "Single-Page App", "JavaScript, Angular", "Client-side music interface loaded in the browser")
    Container(apiGateway, "API Gateway", "Java, Spring Cloud Gateway, Docker", "Routes and aggregates requests to backend microservices", $tags="microService")
    Container(artistSvc, "Artist Service", "Java, Spring Boot, Docker", "Manages artist data and metadata", $tags="microService")
    Container(songSvc, "Song Service", "Java, Spring Boot, Docker", "Manages song catalog and metadata", $tags="microService")
    Container(userSvc, "User Service", "Java, Spring Boot, Docker", "Manages user profiles and authentication", $tags="microService")
    Container(playlistSvc, "Playlist Service", "Java, Spring Boot, Docker", "Handles user playlists and song associations", $tags="microService")
    ContainerDb(artistDb, "artist-db", "MongoDB", "Stores artist records", $tags="storage")
    ContainerDb(songDb, "song-db", "MySQL", "Stores songs and artist relationships", $tags="storage")
    ContainerDb(userDb, "user-db", "PostgreSQL", "Stores user profiles and credentials", $tags="storage")
    ContainerDb(playlistDb, "playlist-db", "MySQL", "Stores playlists and song links", $tags="storage")
}

Rel(user, spaApp, "Uses", "HTTPS")


Rel(apiGateway, spaApp, "Sends responses to", "HTTPS/JSON")
Rel(apiGateway, artistSvc, "Forwards artist requests to", "HTTPS/JSON")
Rel(apiGateway, songSvc, "Forwards song requests to", "HTTPS/JSON")
Rel(apiGateway, userSvc, "Forwards user requests to", "HTTPS/JSON")
Rel(apiGateway, playlistSvc, "Forwards playlist requests to", "HTTPS/JSON")

Rel(playlistSvc, songSvc, "Queries song metadata from", "HTTPS/JSON")
Rel(playlistSvc, userSvc, "Validates user from", "HTTPS/JSON")
Rel(songSvc, artistSvc, "Queries artist metadata from", "HTTPS/JSON")

Rel_D(artistSvc, artistDb, "Reads from and writes to", "JDBC/SQL")
Rel_D(songSvc, songDb, "Reads from and writes to", "JDBC/SQL")
Rel_D(userSvc, userDb, "Reads from and writes to", "JDBC/SQL")
Rel_D(playlistSvc, playlistDb, "Reads from and writes to", "JDBC/SQL")
Rel(artist, spaApp, "Uses", "HTTPS")
Rel(spaApp, apiGateway, "Sends API requests to", "HTTPS/JSON")
@enduml
